import com.intellij.database.model.DasTable
import com.intellij.database.util.Case
import com.intellij.database.util.DasUtil

typeMapping = [
        (~/(?i)tinyint\(1\)/)             : "Boolean",
        (~/(?i)tinyint/)                  : "Int",
        (~/(?i)bigint/)                   : "Long",
        (~/(?i)int/)                      : "Int",
        (~/(?i)float|double|decimal|real/): "Double",
        (~/(?i)datetime|timestamp/)       : "LocalDateTime",
        (~/(?i)date/)                     : "LocalDate",
        (~/(?i)time/)                     : "LocalTime",
        (~/(?i)/)                         : "String",
        (~/(?i)enum/)                     : "enum",
]

FILES.chooseDirectoryAndSave("Choose directory", "Choose where to store generated files") { dir ->
    SELECTION.filter { it instanceof DasTable }.each { generate(it, dir) }
}

def generate(table, dir) {
    def tableName = table.getName()
    def className = javaName(table.getName(), true)
    def fields = calcFields(table)
    def path = dir.path.replace('/', '.')
    def packageName = path.substring(path.indexOf(".com") + 1)
    new File(dir, className + ".kt").withPrintWriter { out -> generate(out, packageName, tableName, className, fields) }
}

def generate(out, packageName, tableName, className, fields) {
    out.println "package $packageName"
    out.println ""
    out.println ""
    out.println "import java.util.*"
    out.println "import java.time.*"
    out.println "import javax.persistence.*"
    out.println ""
    out.println "@Entity"
    out.println "@Table(name = \"$tableName\")"
    out.println "data class $className("
    out.println ""
    fields.each() {
        if (it.annos != "") out.println "  ${it.annos}"
        if (it.primary || it.isAutoInc) {
            out.println "    @Id"
            out.println "    @GeneratedValue(strategy = GenerationType.IDENTITY)"
            out.println "    @Column(name = \"${it.colName}\"${it.orgType == "text" ? ", columnDefinition=\"TEXT\"" : ""})"
            out.println "    var ${it.name}: ${it.type}? = null,"
        } else {
            out.println "    @Column(name = \"${it.colName}\"${it.orgType == "text" ? ", columnDefinition=\"TEXT\"" : ""})"
            out.println "    var ${it.name}: ${it.type}${it.nullable || it.isNullType ? "? = null" : (it.defaultValue == null ? "" : " = ${it.defaultValue}")}${it == fields.last() ? "" : ","}"
        }
        out.println ""

    }
    out.println ")"
}

def calcFields(table) {
    DasUtil.getColumns(table).reduce([]) { fields, col ->
        def spec = Case.LOWER.apply(col.getDataType().getSpecification())
        def typeStr = typeMapping.find { p, t -> p.matcher(spec).find() }.value
        fields += [[
                           colName     : col.getName(),
                           name        : javaName(col.getName(), false),
                           comment     : col.getComment(),
                           type        : typeStr,
                           orgType     : spec,
                           nullable    : !col.isNotNull(),
                           defaultValue : col.getDefault()?.replaceAll("'", "\""),
                           primary     : DasUtil.isPrimary(col),
                           isAutoInc   : DasUtil.isAutoGenerated(col),
                           isForeignKey: DasUtil.isForeign(col),
                           isIndex     : DasUtil.isIndexColumn(col),
                           isNullType  : Case.LOWER.apply(typeStr).contains("date") || Case.LOWER.apply(typeStr).contains("time"),
                           annos       : ""]]
    }
}

def javaName(str, capitalize) {
    def s = com.intellij.psi.codeStyle.NameUtil.splitNameIntoWords(str)
            .collect { Case.LOWER.apply(it).capitalize() }
            .join("")
            .replaceAll(/[^\p{javaJavaIdentifierPart}[_]]/, "_")
    capitalize || s.length() == 1 ? s : Case.LOWER.apply(s[0]) + s[1..-1]
}
