import com.intellij.database.model.DasColumn
import com.intellij.database.model.DasTable
import com.intellij.database.util.Case
import com.intellij.database.util.DasUtil

import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

FILES.chooseDirectoryAndSave("Choose directory", "Choose where to store generated files") { dir ->
    def dateTime = LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME)
    def dbml = new StringBuilder()
    List<Map<String, String>> relationColumns = new ArrayList<>()
    List<String> tableNames = new ArrayList<>()

    SELECTION.filter { it instanceof DasTable }.each { generateTableDBML(it, dbml, relationColumns, tableNames) }

    generateTableRelationDBML(tableNames, relationColumns, dbml)

    def file = new File(dir, dateTime + ".dbml")
    def fileWriter = new FileWriter(file, true)

    fileWriter.write(dbml.toString())
    fileWriter.flush()
}

def generateTableDBML(DasTable table, dbmlString, List<Map<String, String>> relationColumns, List<String> tableNames) {
    tableNames.add(table.name)
    dbmlString.append("Table ${table.getName()} {\n")
    DasUtil.getColumns(table).each() { DasColumn column ->
        appendColumnNameAndType(column, dbmlString)
        appendAttributeAndComment(column, dbmlString)
        addRelationColumn(column, relationColumns)
    }
    if (table.getComment() != null && !table.getComment().isBlank()) {
        dbmlString.append("\n  Note: '${table.getComment()}'\n")
    }
    dbmlString.append("}\n\n")
}

private void appendAttributeAndComment(DasColumn column, dbmlString) {
    def attributes = getAttributeCount(column)

    if (attributes.size() > 0 || column.comment != null) {
        dbmlString.append(" [")
    }

    if (attributes.size() > 0) {
        attributes.each {
            switch (it) {
                case DasColumn.Attribute.PRIMARY_KEY:
                    dbmlString.append("pk")
                    if (attributes.size() > 1) {
                        dbmlString.append(", ")
                    }
                    break
                case DasColumn.Attribute.AUTO_GENERATED:
                    dbmlString.append("increment")
                    break
                default:
                    break
            }
        }
    }

    if (column.comment != null) {
        if (attributes.size() > 0) {
            dbmlString.append(",")
        }
        dbmlString.append(" Note: '${column.comment}'")
    }
    dbmlString.append("]\n")
}

private void appendColumnNameAndType(DasColumn column, dbmlString) {
    dbmlString.append("  ${column.name} ${Case.LOWER.apply(column.getDataType().getSpecification())}")
}


List<DasColumn.Attribute> getAttributeCount(DasColumn column) {
    def attributes = [DasColumn.Attribute.PRIMARY_KEY, DasColumn.Attribute.AUTO_GENERATED]
    def columnAttributes = new ArrayList<DasColumn.Attribute>()
    attributes.each { it ->
        if (column.getTable().getColumnAttrs(column).contains(it)) {
            columnAttributes.add(it)
        }
    }
    return columnAttributes
}
//def generateTableDBML(dbmlString, tableName, fields) {
//    dbmlString.append("Table $tableName {\n")
//    fields.each() {
//        dbmlString.append("  ${it.colName} ${it.orgType}")
//        if ( it.comment != null ) {
//            dbmlString.append("[ Note: '${it.comment}']\n")
//        }
//    }
//    dbmlString.append("}\n\n")
//}

//def calcFields(table) {
//    def columns = DasUtil.getColumns(table)
//    columns.
//
//    DasUtil.getColumns(table).reduce([]) { fields, col ->
//        def spec = Case.LOWER.apply(col.getDataType().getSpecification())
//        fields += [[
//                           colName     : col.getName(),
//                           orgType     : spec,
//                           nullable    : !col.isNotNull(),
//                           isPrimary   : DasUtil.isPrimary(col),
//                           isAutoInc   : DasUtil.isAutoGenerated(col),
//                           isForeignKey: DasUtil.isForeign(col),
//                           isIndex     : DasUtil.isIndexColumn(col),
//                           comment     : col.getComment(),
//                           annos       : ""]]
//    }
//}


void addRelationColumn(DasColumn dasColumn, List<Map<String, String>> relationColumns) {
    if (dasColumn.name.endsWith("_no")) {
        def map = new HashMap<String, String>()
        map.put("tableName", dasColumn.tableName)
        map.put("key", dasColumn.name)
        relationColumns.add(map)
    }
}

def void generateTableRelationDBML(List<String> tableNames, ArrayList<Map<String, String>> relationColumns, StringBuilder dbml) {
    relationColumns.each { columnMap ->
        tableNames.each { tableName ->
            if (tableName.endsWith(columnMap.get("key").substring(0, columnMap.get("key").indexOf("_no")))) {
                dbml.append("Ref: ${tableName}.no < ${columnMap.get("tableName")}.${columnMap.get("key")}\n")
            }
        }
    }
}